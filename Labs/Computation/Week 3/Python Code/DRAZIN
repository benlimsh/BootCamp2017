import numpy as np
from scipy import linalg as la
from scipy.sparse import csgraph

#Drazin Problem 1

def drazin(A, k, Ad):
    return ((A @ Ad == Ad @ A) & (A**(k+1) @ Ad == (A**k)) & (Ad @ A @ Ad == Ad))

A = np.array([[1,3,0,0], [0,1,3,0], [0,0,1,3],[0,0,0,0]])
Ad = np.array([[1,-3,9,81], [0,1,-3,-18], [0,0,1,3], [0,0,0,0]])
k_A = 1

B = np.array([[1,1,3],[5,2,6],[-2,-1,-3]])
Bd = np.array([[0,0,0],[0,0,0],[0,0,0]])
k_B = 3

print(drazin(A, k_A, Ad))
print(drazin(B, k_B, Bd))

#schur decomposition: A = QTQ^-1 WHERE Q is orthonormal, T is upper triangular
def drazininverse(A,tol):
    A = A.astype(float)
    n , n = A.shape
    f = lambda x: abs(x) > tol
    g = lambda x: abs(x) <= tol
    Q1, S, k1 = la.schur(A, sort = f)
    Q2, T, k2 = la.schur(A, sort = g)
    U = np.concatenate((S[:,:k1], T[:,:(n - k1)]), axis = 1).astype(float)
    Uinv = np.linalg.inv(U).astype(float)
    V = (Uinv @ A @ U).astype(float)
    Z = np.zeros((n,n)).astype(float)
    if (k1 != 0):
        Minv = np.linalg.inv(V[:k1, :k1])
        Z[:k1, :k1] = Minv
    return U @ Z @ Uinv

print("Check Ad: ", '\n', drazininverse(A, 1e-5))
print("Check Bd: ", '\n',drazininverse(B, 1e-5))

#Drazin Problem 3
#A is an adjacency matrix of an undirected graph, weights are 1
#Returns matrix where the (ij)th entry is the effective resistance
#from node i to node j

def resistance(A):
    A = A.astype(float)
    m , n = A.shape
    D = np.empty_like(A).astype(float)
    for i in range(0, m):
        D[i][i] = np.sum(A[i,:], axis = 0)
    L = D - A
    R = np.empty_like(L)
    I = np.identity(len(L))

    for i in range(0, m):
        for j in range(0, n):
            if (i == j):
                R[i][j] = 0
            else:
                Ld_pre = np.copy(L)
                Ld_pre[j,:] = I[j,:]
                Ld_post = drazininverse(Ld_pre, 1e-5)
                R[i][j] = Ld_post[i][i]

    return R

testmat1 = np.array([[0,2], [2,0]])
print(resistance(testmat1))
testmat2 = np.array([[0,4], [4,0]])
print(resistance(testmat2))
testmat3 = np.array([[0,3], [3,0]])
print(resistance(testmat3))

#Drazin Problems 4 and 5

class LinkPredictor():
    def __init__(self, name):
        if isinstance(name, str):
            file_name = name + ".csv"
            with open(name, 'r') as myfile:
                nodes = []
                for line in myfile.readlines():
                    for node in line.split(","):
                        nodes.append(node)
            m = int(len(nodes)/2)
            nodescopy = sorted(list(set([node.rstrip("\n") for node in nodes])))
            self.nodes = nodescopy
            self.adj = np.asarray([node.rstrip("\n") for node in nodes]).reshape(m,2)
            A = np.zeros((len(nodescopy), len(nodescopy)))
            for row in self.adj:
                i = nodescopy.index(row[0])
                j = nodescopy.index(row[1])
                A[i][j] = A[i][j] + 1
                A[j][i] = A[j][i] + 1

            self.adj = A
            self.res = resistance(A)

        else:
            raise TypeError("Name must be a string.")

    def predict_link(self, node):
        if (node == None):
            A = np.copy(self.adj)
            R = np.copy(self.res)
            N = np.copy(self.nodes)
            for i in range(len(A)):
                for j in range(len(A)):
                    if (A[i][j] != 0):
                        R[i][j] = 2
                R[i][i] = 2 #2 is a placeholder value to allow the min function to disregard connected nodes and self nodes
            least = R.min()
            indices = list(np.where(R == least))
            index_i = indices[0]
            index_j = indices[1]

            return N[index_i[0]], N[index_j[0]]

        elif (isinstance(node, str) & (node in self.nodes)):
            A = np.copy(self.adj)
            R = np.copy(self.res)
            for i in range(len(A)):
                for j in range(len(A)):
                    if (A[i][j] != 0):
                        R[i][j] = 2
                R[i][i] = 2 #2 is a placeholder value to allow the min function to disregard connected nodes and self nodes

            N = np.copy(self.nodes)
            loc = np.where(N == node)
            least = R[loc, :].min()
            index = list(np.where(R == least))
            index_j = index[1]
            return N[index_j[0]]
        else:
            raise ValueError("Node is not in the network.")

    def add_link(self, node1, node2):
        if ((node1 not in self.nodes) | (node2 not in self.nodes)):
            raise ValueError("Node is not in the network.")
        else:
            A = np.copy(self.adj)
            R = np.copy(self.res)
            N = np.copy(self.nodes)
            index_i = np.where(N == node1)
            index_j = np.where(N == node2)

            A[index_i[0],index_j[0]] = A[index_i[0],index_j[0]] + 1
            A[index_j[0],index_i[0]] = A[index_j[0],index_i[0]] + 1

            return A


def test_nodefile():
    nodefile = LinkPredictor("nodefile")
    print("Unique list: ", '\n', nodefile.nodes)
    print("Adjacency matrix: ", '\n', nodefile.adj)
    print("Resistance matrix: ", '\n', nodefile.res)
    print("PREDICTED NODES FOR NONE: ", nodefile.predict_link(None))
    print("PREDICTED NODES FOR '1': ", nodefile.predict_link('1'))
    print("PREDICTED NODES FOR '2': ", nodefile.predict_link('2'))
    print("PREDICTED NODES FOR '3': ", nodefile.predict_link('3'))
    print("PREDICTED NODES FOR '4': ", nodefile.predict_link('4'))
    print("ADJACENCY MATRIX AFTER CONNECTING 1 AND 4: ", '\n',  nodefile.add_link('1', '4'))


    #print(nodefile.predict_link(blah)) --> WILL RETURN VALUE ERROR
    #print(nodefile.predict_link('5')) --> WILL RETURN VALUE ERROR
test_nodefile()

def test_social():
    social = LinkPredictor("social_network")
    print("Unique list: ", '\n', social.nodes)
    print("Adjacency matrix: ", '\n', social.adj)
    print("Resistance matrix: ", '\n', social.res)
    print("PREDICTED NODES FOR NONE: ", social.predict_link(None))
    print("PREDICTED NODES FOR 'Melanie': ", social.predict_link('Melanie'))
    print("PREDICTED NODES FOR 'Alan': ", social.predict_link('Alan'))
    print("ADJACENCY MATRIX AFTER CONNECTING Piers and Madeleine: ", '\n',  social.add_link('Piers', 'Madeleine'))

test_social()
