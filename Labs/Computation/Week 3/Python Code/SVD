import numpy as np
from scipy import linalg as la
from matplotlib import pyplot as plt
import math
import random

#SVD PROBLEM 1
def truncated_svd(A, k = None):
    m, n = A.shape
    Aconj = np.conj(A)
    Aherm = Aconj.T
    AhA = Aherm @ A
    eigenvalues, eigenvectors = la.eig(AhA)
    singular = np.sqrt(eigenvalues)
    eigenvectors = eigenvectors.T
    mat = np.vstack((singular, eigenvectors))
    mat[mat[0,:].argsort()[::-1]]

    if k == None:
        indices = [i for (i,v) in enumerate(mat[0]) if v==0]
        mat = np.delete(mat, indices, 1)
        firstrow = mat[0,:]
        S = np.diag(firstrow)
        firstrowrecip = np.reciprocal(firstrow)
        V = mat[1:, :]
        U = A @ V
        for i in range(0, len(U)):
            U[:,i] = firstrowrecip[i]*U[:,i]

    elif isinstance(k, int) == True:
        mat = mat[:, 0:k-1]
        S = np.diag(np.diag(mat[0,:]))
        firstrowrecip = np.reciprocal(firstrow)
        V = mat[1:, :]
        U = A @ V
        for i in range(0, len(U)):
            U[:,i] = firstrowrecip[i]*U[:,i]

    return U, S, V

A7 = np.matrix([[1., 2., 3.],[4., 2., 1.],[7., 6., 9.]])

print("U: ", '\n', truncated_svd(A7)[0], '\n')
print("S: ", '\n', truncated_svd(A7)[1], '\n')
print("V: ", '\n', truncated_svd(A7)[2], '\n')
print("Estimated A: ", '\n', truncated_svd(A7)[0] @ truncated_svd(A7)[1] @ np.conj(truncated_svd(A7)[2].T))
print("Actual A: ", '\n', A7)

#SVD PROBLEM 2
def circle():
    x = np.array([])
    y = np.array([])

    angle = np.linspace(0, np.pi*2, 1000)
    x = np.cos(np.copy(angle))
    y = np.sin(np.copy(angle))
    return x,y

def transformations():
    A = np.matrix([[3,1],[1,3]])
    x = circle()[0].reshape(1,1000)
    y = circle()[1].reshape(1,1000)
    S = np.vstack((x,y))

    U = truncated_svd(A)[0]
    Sigma = truncated_svd(A)[1]
    V = truncated_svd(A)[2]
    Vherm = (np.conj(V)).T

    plt.subplot(221)
    plt.scatter(x,y)

    plt.subplot(222)
    new2 = Vherm @ S
    plt.scatter(new2[0,:], new2[1,:])

    plt.subplot(223)
    new3 = Sigma @ Vherm @ S
    plt.scatter(new3[0,:], new3[1,:])
    new4 = U @ new3
    n1 = new4[0,:]
    n2 = new4[1,:]
    print(np.shape(new4),np.shape(n1),np.shape(n2))

    plt.subplot(224)
    plt.plot(n1, n2, ".",color="blue",markersize=1)
    plt.axis("equal")

    plt.show()

transformations()

#SVD PROBLEM 3
def svd_approx(A, k):
    U, s, Vh = la.svd(A, full_matrices = False)
    S = np.diag(s[:k])
    Ahat = U[:, :k].dot(S).dot(Vh[:k,:])
    return Ahat

print(svd_approx(A7, 2))
print(svd_approx(A7, 3))

#SVD PROBLEM 4
def lowest_rank_approx(A, e):
    U, s, Vh = la.svd(A, full_matrices = False)
    k = 1
    S = np.diag(s[:k])
    Ahat = U[:, :k].dot(S).dot(Vh[:k,:])

    while (la.norm(A-Ahat) < e):
        k = k + 1
        S = np.diag(s[:k])
        Ahat = U[:, :k].dot(S).dot(Vh[:k,:])

    return Ahat

A8 = np.random.random((10,10))
print(lowest_rank_approx(A8, 1e-5))

#SVD PROBLEM 5
def compress_img(filename):
    X = plt.imread(filename)[:,:,0].astype(float)
    plt.imshow(svd_approx(X,20), cmap="gray")
    plt.show()

compress_img('/Users/benjaminlim/Documents/BootCamp2017/Labs/Computation/Week 3/hubble.jpg')
